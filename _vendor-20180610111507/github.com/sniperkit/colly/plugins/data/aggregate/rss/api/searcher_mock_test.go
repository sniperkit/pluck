// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/article.go

// Package api is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	content "github.com/urandom/readeef/content"
	reflect "reflect"
)

// Mocksearcher is a mock of searcher interface
type Mocksearcher struct {
	ctrl     *gomock.Controller
	recorder *MocksearcherMockRecorder
}

// MocksearcherMockRecorder is the mock recorder for Mocksearcher
type MocksearcherMockRecorder struct {
	mock *Mocksearcher
}

// NewMocksearcher creates a new mock instance
func NewMocksearcher(ctrl *gomock.Controller) *Mocksearcher {
	mock := &Mocksearcher{ctrl: ctrl}
	mock.recorder = &MocksearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocksearcher) EXPECT() *MocksearcherMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *Mocksearcher) Search(arg0 string, arg1 content.User, arg2 ...content.QueryOpt) ([]content.Article, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]content.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MocksearcherMockRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*Mocksearcher)(nil).Search), varargs...)
}
