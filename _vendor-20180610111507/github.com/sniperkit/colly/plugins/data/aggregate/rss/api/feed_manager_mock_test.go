// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/feed.go

// Package mock_api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	content "github.com/urandom/readeef/content"
)

// MockfeedManager is a mock of feedManager interface
type MockfeedManager struct {
	ctrl     *gomock.Controller
	recorder *MockfeedManagerMockRecorder
}

// MockfeedManagerMockRecorder is the mock recorder for MockfeedManager
type MockfeedManagerMockRecorder struct {
	mock *MockfeedManager
}

// NewMockfeedManager creates a new mock instance
func NewMockfeedManager(ctrl *gomock.Controller) *MockfeedManager {
	mock := &MockfeedManager{ctrl: ctrl}
	mock.recorder = &MockfeedManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfeedManager) EXPECT() *MockfeedManagerMockRecorder {
	return m.recorder
}

// AddFeedByLink mocks base method
func (m *MockfeedManager) AddFeedByLink(link string) (content.Feed, error) {
	ret := m.ctrl.Call(m, "AddFeedByLink", link)
	ret0, _ := ret[0].(content.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeedByLink indicates an expected call of AddFeedByLink
func (mr *MockfeedManagerMockRecorder) AddFeedByLink(link interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeedByLink", reflect.TypeOf((*MockfeedManager)(nil).AddFeedByLink), link)
}

// RemoveFeed mocks base method
func (m *MockfeedManager) RemoveFeed(feed content.Feed) {
	m.ctrl.Call(m, "RemoveFeed", feed)
}

// RemoveFeed indicates an expected call of RemoveFeed
func (mr *MockfeedManagerMockRecorder) RemoveFeed(feed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFeed", reflect.TypeOf((*MockfeedManager)(nil).RemoveFeed), feed)
}

// DiscoverFeeds mocks base method
func (m *MockfeedManager) DiscoverFeeds(link string) ([]content.Feed, error) {
	ret := m.ctrl.Call(m, "DiscoverFeeds", link)
	ret0, _ := ret[0].([]content.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverFeeds indicates an expected call of DiscoverFeeds
func (mr *MockfeedManagerMockRecorder) DiscoverFeeds(link interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverFeeds", reflect.TypeOf((*MockfeedManager)(nil).DiscoverFeeds), link)
}
