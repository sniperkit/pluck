// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/urandom/readeef/content/repo (interfaces: Service)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	gomock "github.com/golang/mock/gomock"
	repo "github.com/urandom/readeef/content/repo"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ArticleRepo mocks base method
func (m *MockService) ArticleRepo() repo.Article {
	ret := m.ctrl.Call(m, "ArticleRepo")
	ret0, _ := ret[0].(repo.Article)
	return ret0
}

// ArticleRepo indicates an expected call of ArticleRepo
func (mr *MockServiceMockRecorder) ArticleRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleRepo", reflect.TypeOf((*MockService)(nil).ArticleRepo))
}

// ExtractRepo mocks base method
func (m *MockService) ExtractRepo() repo.Extract {
	ret := m.ctrl.Call(m, "ExtractRepo")
	ret0, _ := ret[0].(repo.Extract)
	return ret0
}

// ExtractRepo indicates an expected call of ExtractRepo
func (mr *MockServiceMockRecorder) ExtractRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRepo", reflect.TypeOf((*MockService)(nil).ExtractRepo))
}

// FeedRepo mocks base method
func (m *MockService) FeedRepo() repo.Feed {
	ret := m.ctrl.Call(m, "FeedRepo")
	ret0, _ := ret[0].(repo.Feed)
	return ret0
}

// FeedRepo indicates an expected call of FeedRepo
func (mr *MockServiceMockRecorder) FeedRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedRepo", reflect.TypeOf((*MockService)(nil).FeedRepo))
}

// ScoresRepo mocks base method
func (m *MockService) ScoresRepo() repo.Scores {
	ret := m.ctrl.Call(m, "ScoresRepo")
	ret0, _ := ret[0].(repo.Scores)
	return ret0
}

// ScoresRepo indicates an expected call of ScoresRepo
func (mr *MockServiceMockRecorder) ScoresRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoresRepo", reflect.TypeOf((*MockService)(nil).ScoresRepo))
}

// SubscriptionRepo mocks base method
func (m *MockService) SubscriptionRepo() repo.Subscription {
	ret := m.ctrl.Call(m, "SubscriptionRepo")
	ret0, _ := ret[0].(repo.Subscription)
	return ret0
}

// SubscriptionRepo indicates an expected call of SubscriptionRepo
func (mr *MockServiceMockRecorder) SubscriptionRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRepo", reflect.TypeOf((*MockService)(nil).SubscriptionRepo))
}

// TagRepo mocks base method
func (m *MockService) TagRepo() repo.Tag {
	ret := m.ctrl.Call(m, "TagRepo")
	ret0, _ := ret[0].(repo.Tag)
	return ret0
}

// TagRepo indicates an expected call of TagRepo
func (mr *MockServiceMockRecorder) TagRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRepo", reflect.TypeOf((*MockService)(nil).TagRepo))
}

// ThumbnailRepo mocks base method
func (m *MockService) ThumbnailRepo() repo.Thumbnail {
	ret := m.ctrl.Call(m, "ThumbnailRepo")
	ret0, _ := ret[0].(repo.Thumbnail)
	return ret0
}

// ThumbnailRepo indicates an expected call of ThumbnailRepo
func (mr *MockServiceMockRecorder) ThumbnailRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThumbnailRepo", reflect.TypeOf((*MockService)(nil).ThumbnailRepo))
}

// UserRepo mocks base method
func (m *MockService) UserRepo() repo.User {
	ret := m.ctrl.Call(m, "UserRepo")
	ret0, _ := ret[0].(repo.User)
	return ret0
}

// UserRepo indicates an expected call of UserRepo
func (mr *MockServiceMockRecorder) UserRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepo", reflect.TypeOf((*MockService)(nil).UserRepo))
}
