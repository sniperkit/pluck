// Code generated by "enumer -type=Type"; DO NOT EDIT

package storage

import "testing"

func TestType_String(t *testing.T) {
	tests := []struct {
		name string
		i    Type
		want string
	}{
		{
			name: "-1",
			i: -1,
			want: "Type(-1)",
		},
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.i.String(); got != tt.want {
				t.Errorf("Type.String() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTypeString(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name    string
		args    args
		want    Type
		wantErr bool
	}{
		{
			name: "Diskv",
			args: args{
				s: "Diskv",
			},
			want: Diskv,
			wantErr: false,
		},
		{
			name: "Unknown",
			args: args{
				s: "Unknown",
			},
			want: 0,
			wantErr: true,
		},
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := TypeString(tt.args.s)
			if (err != nil) != tt.wantErr {
				t.Errorf("TypeString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("TypeString() = %v, want %v", got, tt.want)
			}
		})
	}
}
